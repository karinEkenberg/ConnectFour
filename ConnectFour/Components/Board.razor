@inject GameState State
@inject IJSRuntime JSRuntime;


<HeadContent>
<style>
/*         :root {
            --board-bg: #C4E4FF; 
             --player1: #D20062;
            --player2: #D895DA;
        } */
</style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
<span title="Click to play a piece" @onclick="() => PlayPiece(col) ">🔽</span>
    }
</nav>
<article>
    @winnerMessage <button class="btn btn-info" style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
<br />
<span class="alert-danger">@errorMessage</span>
<span class="alert-info">@CurrentTurn</span>
</article>
<div style="--board-bg: @BoardStyle">
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
            <span></span>
            </span>
        }
 
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span style="--player1: @Player1; --player2: @Player2" class="@pieces[i]"></span>
    }
</div>
<audio id="player1Audio" src="/Audio/player1sound.mp3" type="audio/mp3"></audio>
<audio id="player2Audio" src="/Audio/player2sound.mp3" type="audio/mp3"></audio>

@code {
    [Parameter]
    public string BoardStyle { get; set; } = "#C4E4FF";

    [Parameter]
    public string Player1 { get; set; } = "#D20062";

    [Parameter]
    public string Player2 { get; set; } = "#D895DA";

    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display:none;" : "";

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private async void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";

            var audioId = player == 1 ? "player1Audio" : "player2Audio";
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{audioId}').play()");
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
 
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins! CONGRATULATIONS!!",
            GameState.WinState.Player2_Wins => "Player 2 Wins! CONGRATULATIONS!!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
 
    }
    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }
 
}